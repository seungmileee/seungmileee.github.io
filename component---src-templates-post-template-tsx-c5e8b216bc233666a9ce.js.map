{"version":3,"file":"component---src-templates-post-template-tsx-c5e8b216bc233666a9ce.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/components/Post/Outline.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\n\nexport type PostHeadInfoProps = {\n  title: string\n  date: string\n  categories: string[]\n}\n\nconst PostHeadInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  height: 100%;\n  margin: 0 auto;\n  padding: 60px 0;\n  color: #ffffff;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 40px 20px;\n  }\n`\n\nconst PrevPageIcon = styled.div`\n  display: grid;\n  place-items: center;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background: #ffffff;\n  color: #000000;\n  font-size: 22px;\n  cursor: pointer;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n\n  @media (max-width: 768px) {\n    width: 30px;\n    height: 30px;\n    font-size: 18px;\n  }\n`\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 45px;\n  font-weight: 800;\n\n  @media (max-width: 768px) {\n    font-size: 30px;\n  }\n`\n\nconst PostData = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10px;\n  font-size: 18px;\n  font-weight: 700;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: flex-start;\n    font-size: 15px;\n    font-weight: 400;\n  }\n`\n\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\n  title,\n  date,\n  categories,\n}) {\n  const goBackPage = () => window.history.back()\n\n  return (\n    <PostHeadInfoWrapper>\n      <PrevPageIcon onClick={goBackPage}>\n        <FontAwesomeIcon icon={faArrowLeft} />\n      </PrevPageIcon>\n      <Title>{title}</Title>\n      <PostData>\n        <div>{categories.join(' / ')}</div>\n        <div>{date}</div>\n      </PostData>\n    </PostHeadInfoWrapper>\n  )\n}\n\nexport default PostHeadInfo\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\nimport PostHeadInfo, { PostHeadInfoProps } from 'components/Post/PostHeadInfo'\n\ntype PostHeadProps = PostHeadInfoProps & {\n  thumbnail: IGatsbyImageData\n}\n\ntype GatsbyImgProps = {\n  image: IGatsbyImageData\n  alt: string\n  className?: string\n}\n\nconst PostHeadWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  height: 400px;\n\n  @media (max-width: 768px) {\n    height: 300px;\n  }\n`\nconst BackgroundImage = styled((props: GatsbyImgProps) => (\n  <GatsbyImage {...props} style={{ position: 'absolute' }} />\n))`\n  z-index: -1;\n  width: 100%;\n  height: 400px;\n  object-fit: cover;\n  filter: brightness(0.25);\n\n  @media (max-width: 768px) {\n    height: 300px;\n  }\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\n  title,\n  date,\n  categories,\n  thumbnail,\n}) {\n  return (\n    <PostHeadWrapper>\n      <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\n      <PostHeadInfo title={title} date={date} categories={categories} />\n    </PostHeadWrapper>\n  )\n}\n\nexport default PostHead\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ninterface PostContentProps {\n  html: string\n}\n\nconst MarkdownRenderer = styled.div`\n  // Renderer Style\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  margin: 0 auto;\n  padding: 100px 0;\n  word-break: break-all;\n\n  // Markdown Style\n  line-height: 1.8;\n  font-size: 16px;\n  font-weight: 400;\n\n  // Apply Padding Attribute to All Elements\n  p {\n    padding: 3px 0;\n  }\n\n  // Adjust Heading Element Style\n  h1,\n  h2,\n  h3 {\n    font-weight: 800;\n    margin-bottom: 30px;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 80px;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  h1 {\n    font-size: 30px;\n  }\n\n  h2 {\n    font-size: 25px;\n  }\n\n  h3 {\n    font-size: 20px;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 30px 0;\n    padding: 5px 15px;\n    border-left: 2px solid #000000;\n    font-weight: 800;\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 20px;\n    padding: 30px 0;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    border: 1px solid #000000;\n    margin: 100px 0;\n  }\n\n  // Adjust Link Element Style\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  // Adjust Code Style\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 15px;\n    font-size: 15px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n  }\n\n  // Markdown Responsive Design\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 80px 20px;\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 23px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 17px;\n    }\n\n    img {\n      width: 100%;\n    }\n\n    hr {\n      margin: 50px 0;\n    }\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default PostContent\n","import React, { createRef, FunctionComponent, useEffect } from 'react'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'seungmileee/seungmileee.github.io' // 자신 계정의 레포지토리로 설정\n\ntype UtterancesAttributesType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nconst CommentWidget: FunctionComponent = function () {\n  const element = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n\n  return <div ref={element} />\n}\n\nexport default CommentWidget\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ntype PostoutlineProps = {\n  content: string\n}\n\nconst Toc = styled.div`\n  /* top: 0;\n  flex-grow: 0;\n  max-width: calc(100% / 3);\n  flex-basis: calc(100% / 3);\n  margin-left: 1rem;\n  max-width: 18rem;\n  max-height: calc(100vh - 200px);\n  position: sticky;\n  overflow: auto; */\n  /* border: 1px solid red; */\n  margin-top: 20px;\n  font-size: 13px;\n  color: silver;\n  max-width: 18rem;\n  flex-grow: 0;\n  flex-basis: calc(100% / 3);\n  max-height: calc(100vh - 200px);\n  overflow: auto;\n\n  ul,\n  li {\n    list-style: none;\n  }\n\n  /* position: absolute;\n  right: 5px;\n  top: 32rem; */\n`\nconst Outline: FunctionComponent<PostoutlineProps> = function ({ content }) {\n  return (\n    // <div\n    // 스타일링을 위해서 클래스이름 부여 한다.\n    // className=\"table-of-content\"\n\n    // dangerouslySetInnerHTML는 보안 관점에서 위험하지만\n    // innerHTML을 사용하겠다는 뜻이다.\n    // dangerouslySetInnerHTML={{ __html: content }}\n    // />\n    <Toc dangerouslySetInnerHTML={{ __html: content }} />\n  )\n}\n\nexport default Outline\n","import React, { FunctionComponent } from 'react'\nimport { graphql } from 'gatsby'\nimport { PostFrontmatterType } from 'types/PostItem.types'\nimport Template from 'components/Common/Template'\nimport PostHead from 'components/Post/PostHead'\nimport PostContent from 'components/Post/PostContent'\nimport CommentWidget from 'components/Post/CommentWidget'\nimport Outline from 'components/Post/Outline'\nimport styled from '@emotion/styled'\n\nexport type PostPageItemType = {\n  node: {\n    html: string\n    frontmatter: PostFrontmatterType\n    tableOfContents: string\n  }\n}\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n  location: {\n    href: string\n  }\n}\n\nconst PostContentWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}) {\n  const {\n    node: {\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n      tableOfContents,\n    },\n  } = edges[0]\n\n  return (\n    <Template title={title} description={summary} url={href} image={publicURL}>\n      <div className=\"blog-template-container\">\n        <PostHead\n          title={title}\n          date={date}\n          categories={categories}\n          thumbnail={gatsbyImageData}\n        />\n        <PostContentWrapper>\n          <PostContent html={html} />\n          <Outline content={tableOfContents} />\n        </PostContentWrapper>\n        <CommentWidget />\n      </div>\n    </Template>\n  )\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n          tableOfContents\n        }\n      }\n    }\n  }\n`\n\n// query queryMarkdownDataBySlug($slug: String) {\n//   allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n//     edges {\n//       node {\n//         html\n//         frontmatter {\n//           title\n//           summary\n//           date(formatString: \"YYYY.MM.DD.\")\n//           categories\n//           thumbnail {\n//             childImageSharp {\n//               gatsbyImageData\n//             }\n//             publicURL\n//           }\n//         }\n//       }\n//     }\n//   }\n// }\n"],"names":["PostHeadInfoWrapper","PrevPageIcon","Title","PostData","title","date","categories","___EmotionJSX","onClick","window","history","back","FontAwesomeIcon","icon","faArrowLeft","join","PostHeadWrapper","BackgroundImage","_styled","props","GatsbyImage","style","position","process","thumbnail","image","alt","PostHeadInfo","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","Toc","content","PostContentWrapper","target","name","styles","edges","data","allMarkdownRemark","href","location","node","frontmatter","summary","gatsbyImageData","childImageSharp","publicURL","tableOfContents","Template","description","url","className","PostHead","PostContent","Outline","CommentWidget"],"sourceRoot":""}